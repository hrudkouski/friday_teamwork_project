{"version":3,"sources":["n2-features/f1-auth/a1-login/Login.module.css","n1-main/m1-ui/u3-common/Super-Components/c3-SuperCheckbox/SuperCheckbox.module.css","n2-features/f3-error/Error404.module.css","n1-main/m1-ui/u3-common/Super-Components/c1-SuperInputText/SuperInputText.module.css","n1-main/m1-ui/u3-common/Super-Components/c2-SuperButton/SuperButton.module.css","n1-main/m1-ui/u3-common/Super-Components/c4-SuperEditableSpan/SuperSpan.module.css","n1-main/m1-ui/u3-common/Super-Components/c5-SuperSelect/SuperSelect.module.css","n1-main/m1-ui/u2-components/Header/Header.module.css","n2-features/f1-auth/a2-register/Register.module.css","n3-dall/api/api_cards.ts","n2-features/f1-auth/a1-login/login-reducer.ts","n2-features/f1-auth/a2-register/register-reducer.ts","n2-features/f1-auth/a4-new-password/newPassword-reducer.ts","n1-main/m1-ui/u1-app/app-reducer.ts","n1-main/m2-bll/store/redux-store.ts","n2-features/f1-auth/a3-recoveryPassword/recoveryPassword-reducer.ts","n2-features/f1-auth/a5-profile/profile-reducer.ts","n2-features/f1-auth/a1-login/Login.tsx","n1-main/m1-ui/u3-common/Super-Components/c1-SuperInputText/SuperInputText.tsx","n1-main/m1-ui/u3-common/Super-Components/c2-SuperButton/SuperButton.tsx","n2-features/f1-auth/a3-recoveryPassword/RecoveryPassword.tsx","n2-features/f1-auth/a4-new-password/NewPassword.tsx","n1-main/m1-ui/u3-common/Super-Components/c3-SuperCheckbox/SuperCheckbox.tsx","n1-main/m1-ui/u3-common/Super-Components/c4-SuperEditableSpan/SuperEditableSpan.tsx","n1-main/m1-ui/u3-common/Super-Components/c5-SuperSelect/SuperSelect.tsx","n1-main/m1-ui/u3-common/Super-Components/c6-SuperRadio/SuperRadio.tsx","n2-features/f0-test/Test.tsx","n2-features/f3-error/Error404.tsx","n1-main/m1-ui/u2-components/Profile/Profile.tsx","n2-features/f1-auth/a2-register/Register.tsx","n1-main/m1-ui/u4-routes/Routes.tsx","n1-main/m1-ui/u2-components/Header/Header.tsx","n1-main/m1-ui/u2-components/Main/Main.tsx","n1-main/m1-ui/u1-app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","withCredentials","recoveryPasswordApi","email","from","message","post","password","resetPasswordToken","loginApi","user","rememberMe","registerApi","initialState","profile","isLoggedIn","SET_REGISTER_DATA","isRegister","registerUser","dispatch","then","res","data","addedUser","_id","length","type","catch","e","error","response","console","log","alert","isPasswordChanged","SET_ERROR","rootReducer","combineReducers","app","state","action","login","register","recoveryPassword","newPassword","value","store","createStore","applyMiddleware","thunk","window","Login","useDispatch","useSelector","formik","useFormik","initialValues","validate","values","errors","test","onSubmit","loginProfile","err","resetForm","to","className","style","loginFormContainer","loginForm","submitForm","placeholder","name","onChange","handleChange","onBlur","handleBlur","required","touched","checkBoxContainer","checkBox","id","checkBoxLabel","htmlFor","submitButton","SuperInputText","onKeyPress","onChangeText","onEnter","spanClassName","restProps","finalSpanClassName","s","finalInputClassName","input","errorInput","currentTarget","key","SuperButton","red","finalClassName","button","RecoveryPassword","passwordRecovery","handleSubmit","getFieldProps","color","NewPassword","token","useParams","repeatPassword","SuperCheckbox","onChangeChecked","children","checkbox","label","checked","SuperEditableSpan","autoFocus","spanProps","useState","editMode","setEditMode","onDoubleClick","restSpanProps","superSpan","SuperSelect","options","onChangeOption","mappedOptions","map","el","i","select","SuperRadio","onChangeCallback","arr","Test","setValue","selections","undefined","Error404","c","_404","_1","_2","btn","Profile","Register","setType","confirmPassword","authRegister","wrapper","incubator","signUp","inputFormRegister","errorMessage","showHideMenu","onClick","buttonFormRegister","Routes","path","render","Header","h","link","activeClassName","active","Main","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.898f5b75.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginFormContainer\":\"Login_loginFormContainer__2vmVv\",\"loginForm\":\"Login_loginForm__2jjCS\",\"checkBoxContainer\":\"Login_checkBoxContainer__2GsmH\",\"checkBoxLabel\":\"Login_checkBoxLabel__3P5u4\",\"checkBox\":\"Login_checkBox__1zIBp\",\"submitButton\":\"Login_submitButton__1048b\",\"error\":\"Login_error__3dnHq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__vsNfW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"c\":\"Error404_c__29qMy\",\"_404\":\"Error404__404__276o5\",\"_1\":\"Error404__1__2vTjh\",\"_2\":\"Error404__2__1dkY2\",\"text\":\"Error404_text__312p9\",\"btn\":\"Error404_btn__2349u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"SuperInputText_input__2Ri_z\",\"errorInput\":\"SuperInputText_errorInput__3By_1\",\"error\":\"SuperInputText_error__3MskL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"SuperButton_button__3JMxg\",\"glowing\":\"SuperButton_glowing__DUsdW\",\"red\":\"SuperButton_red__28cmk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superSpan\":\"SuperSpan_superSpan__VBb2o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"SuperSelect_select__2u_EY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Header_wrapper__304qh\",\"parent\":\"Header_parent__3uXIU\",\"navLink\":\"Header_navLink__34F64\",\"item\":\"Header_item__r8DJn\",\"triangle\":\"Header_triangle__r8l-5\",\"link\":\"Header_link__1nRIe\",\"active\":\"Header_active__19wmR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"authRegister\":\"Register_authRegister__1J4Dl\",\"wrapper\":\"Register_wrapper__1_QAq\",\"incubator\":\"Register_incubator__MLZxn\",\"signUp\":\"Register_signUp__2a5zp\",\"inputFormRegister\":\"Register_inputFormRegister__1jygd\",\"errorMessage\":\"Register_errorMessage__3XFfq\",\"showHideMenu\":\"Register_showHideMenu__ojVp_\",\"buttonFormRegister\":\"Register_buttonFormRegister__JsPDK\"};","import axios from \"axios\";\r\nimport { ProfileType } from \"../../n2-features/f1-auth/a1-login/login-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true,\r\n})\r\n\r\n// Types\r\n// export type ProfileType = {\r\n//     created: string\r\n//     email: string\r\n//     isAdmin: string\r\n//     name: string\r\n//     publicCardPacksCount: number\r\n//     rememberMe: boolean\r\n//     token: string\r\n//     tokenDeathTime: string\r\n//     updated: string\r\n//     verified: string\r\n//     __v: number\r\n//     _id: string\r\n// } \r\n\r\n// Api\r\nexport const recoveryPasswordApi = {\r\n    passwordRecovery(email: string, from: string, message: {}) {\r\n        return instance.post(`auth/forgot`, {email, from, message})\r\n    },\r\n    newPassword(password: string, resetPasswordToken: {}) {\r\n        return instance.post(`auth/set-new-password`, {password, resetPasswordToken})\r\n    }\r\n}\r\n\r\nexport const loginApi = {\r\n    login(user: ProfileType) {\r\n        return instance.post(`auth/login/`, {email: user.email, password: user.password, rememberMe: user.rememberMe})\r\n    }\r\n}\r\n\r\nexport const registerApi = {\r\n    registerUser(email: string, password: string) {\r\n        return instance.post<any>('auth/register', {\r\n            email, password\r\n        })\r\n    },\r\n}\r\n\r\n","import { addSyntheticTrailingComment } from \"typescript\";\r\nimport { AppRootStateType } from \"../../../n1-main/m2-bll/store/redux-store\";\r\nimport {Dispatch} from 'redux';\r\nimport { loginApi } from \"../../../n3-dall/api/api_cards\";\r\n\r\n// Initial State\r\ntype InitialStateType = {\r\n    profile: ProfileType | null,\r\n    isLoggedIn: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    profile: null,\r\n    isLoggedIn: false\r\n}\r\n\r\n\r\n\r\n\r\n// Reducer\r\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'LOGIN': {\r\n            return {...state, profile: action.profile, isLoggedIn: action.isLoggedIn}\r\n        }\r\n\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type ProfileType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\n// Actions\r\nexport const login = (profile: ProfileType, isLoggedIn: boolean) => (\r\n    {type: 'LOGIN', profile, isLoggedIn} as const) \r\n\r\n// Types\r\ntype ActionsType = ReturnType<typeof login>\r\n\r\n\r\n// Thunk Creators\r\nexport const loginTC = (profile: ProfileType) => (dispatch: Dispatch<ActionsType>) => {\r\n    \r\n\r\n    loginApi.login(profile)\r\n        .then( (res) => {\r\n            dispatch(login(profile, true))\r\n            alert('User: ' + profile.email + ' has been Successfully logged in!')\r\n        })\r\n        .catch( (err) => {\r\n            console.log(err.message)\r\n            alert('Invalid email or password')\r\n        })\r\n}","import {Dispatch} from \"redux\";\r\nimport {registerApi} from \"../../../n3-dall/api/api_cards\";\r\n\r\n// Actions\r\nconst SET_REGISTER_DATA = 'friday_teamwork_project/register-reducer/SET_REGISTER_DATA';\r\n\r\n// Types\r\ntype InitialStateType = typeof initialState;\r\nexport type RegisterActionsType = ReturnType<typeof setRegisterDataAC>\r\n\r\n// Initial State\r\nconst initialState = {\r\n    isRegister: false\r\n}\r\n\r\n// Reducer\r\nexport const registerReducer = (state = initialState, action: RegisterActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_REGISTER_DATA:\r\n            return {\r\n                ...state,\r\n                isRegister: action.isRegister\r\n            }\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const setRegisterDataAC = (isRegister: boolean) => ({\r\n    type: SET_REGISTER_DATA, isRegister\r\n} as const)\r\n\r\n// Thunk Creators\r\nexport const registerUser = (email: string, password: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        registerApi.registerUser(email, password)\r\n            .then((res) => {\r\n                if (res.data.addedUser._id.length > 0) {\r\n                    dispatch(setRegisterDataAC(true))\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                const error = e.response\r\n                    ? e.response.data.error\r\n                    : (e.message + ', more details in the console');\r\n                console.log(error)\r\n                alert(error)\r\n            })\r\n    }\r\n}","import { Dispatch } from \"redux\";\r\nimport {recoveryPasswordApi} from \"../../../n3-dall/api/api_cards\";\r\n\r\nconst initialState: InitialStateType = {\r\n    isPasswordChanged: false\r\n}\r\n\r\nexport const newPasswordReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"NEW-PASSWORD/PASSWORD-CHANGED\":\r\n            return {...state, isPasswordChanged: action.value}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nconst passwordChanged = (value: boolean) => ({type: \"NEW-PASSWORD/PASSWORD-CHANGED\", value})\r\n\r\nexport const newPassword = (password: string, resetPasswordToken: {}) => (dispatch: Dispatch<ActionType>) => (\r\n    recoveryPasswordApi.newPassword(password, resetPasswordToken)\r\n        .then(response => {\r\n            dispatch(passwordChanged(true))\r\n        })\r\n)\r\n\r\ntype InitialStateType = {\r\n    isPasswordChanged: boolean\r\n}\r\n\r\ntype ActionType = ReturnType<typeof passwordChanged>","// Actions\r\nconst SET_ERROR = 'friday_teamwork_project/app-reducer/SET_ERROR';\r\n\r\n// Types\r\nexport type ErrorType = null | string;\r\nexport type SetAppErrorAT = ReturnType<typeof setAppError>;\r\nexport type AppActionsType = SetAppErrorAT;\r\nexport type InitialStateType = typeof initialState;\r\n\r\n//Initial State\r\nconst initialState = {\r\n    error: null as ErrorType,\r\n}\r\n\r\n// Reducer\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_ERROR:\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const setAppError = (error: ErrorType) => ({type: SET_ERROR, error}) as const;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {loginReducer} from \"../../../n2-features/f1-auth/a1-login/login-reducer\";\r\nimport {registerReducer} from \"../../../n2-features/f1-auth/a2-register/register-reducer\";\r\nimport {recoveryPasswordReducer} from \"../../../n2-features/f1-auth/a3-recoveryPassword/recoveryPassword-reducer\";\r\nimport {newPasswordReducer} from \"../../../n2-features/f1-auth/a4-new-password/newPassword-reducer\";\r\nimport {profileReducer} from \"../../../n2-features/f1-auth/a5-profile/profile-reducer\";\r\nimport {AppActionsType, appReducer} from \"../../m1-ui/u1-app/app-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    login: loginReducer,\r\n    register: registerReducer,\r\n    recoveryPassword: recoveryPasswordReducer,\r\n    newPassword: newPasswordReducer,\r\n    profile: profileReducer,\r\n})\r\n\r\nexport type AppActionType =\r\n    | AppActionsType;\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppRootStateType,\r\n    unknown,\r\n    AppActionType>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store // for dev","import {recoveryPasswordApi} from \"../../../n3-dall/api/api_cards\";\r\n\r\nexport const recoveryPasswordReducer = (state: any, action: any): any => {\r\n    switch (action.type) {\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const passwordRecovery = (email: string, from: string, message: {}) => {\r\n    recoveryPasswordApi.passwordRecovery(email, from, message)\r\n}","// Reducer\r\nexport const profileReducer = (state: any, action: any): any => {\r\n    switch (action.type) {\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n// Actions\r\n// Types\r\n// Initial State\r\n// Action Creators\r\n// Thunk Creators","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useFormik } from 'formik';\r\nimport { loginTC, ProfileType } from \"./login-reducer\";\r\nimport { AppRootStateType } from \"../../../n1-main/m2-bll/store/redux-store\";\r\nimport style from './Login.module.css';\r\n\r\nexport const Login = () => {\r\n\r\n    type FormikErrorType = { \r\n        email?: string \r\n        password?: string \r\n        rememberMe?: boolean \r\n     } \r\n   \r\n        const dispatch = useDispatch();\r\n        const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    \r\n        const formik = useFormik({\r\n            initialValues: {\r\n                email: '',\r\n                password: '',\r\n                rememberMe: false\r\n            },\r\n            validate: (values) => { \r\n    \r\n                const errors: FormikErrorType = {}; \r\n                if (!values.email) { \r\n                    errors.email = 'Required'; \r\n                } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) { \r\n         \r\n                    errors.email = 'Invalid email address'; \r\n                } \r\n    \r\n                if(!values.password){\r\n                    errors.password = 'Required';\r\n                } else if (values.password.length < 4) {\r\n         \r\n                    errors.password = 'Password to short'; \r\n                }\r\n    \r\n                return errors; \r\n            }, \r\n            onSubmit: values => {\r\n                \r\n                //alert(JSON.stringify(values, null, 2))\r\n                \r\n                const loginProfile = {\r\n                    email: values.email,\r\n                    password: values.password,\r\n                    rememberMe: values.rememberMe\r\n                }\r\n                dispatch(loginTC(loginProfile))\r\n                formik.resetForm();\r\n            },\r\n        });\r\n    \r\n        if(isLoggedIn) {\r\n            return <Redirect to={'/profile'}/>\r\n        }\r\n    \r\n       return <>\r\n                <div className={style.loginFormContainer}>\r\n                    Login\r\n                    <form className={style.loginForm}\r\n                            onSubmit={formik.submitForm}>\r\n\r\n                        {/* required  - validating form but need to refactor this */}\r\n                        <input type=\"text\" \r\n                                placeholder='Email*' \r\n                                name='email'\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.email}\r\n                                onBlur={formik.handleBlur} \r\n                                required/>\r\n                        \r\n                        {formik.touched.email && formik.errors.email && \r\n                        <div className={style.error}>{formik.errors.email}</div>}\r\n\r\n\r\n                        <input type=\"password\" \r\n                                placeholder='Password*' \r\n                                name='password'\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.password}\r\n                                onBlur={formik.handleBlur}  \r\n                                required/>\r\n                        \r\n                        {formik.touched.password && formik.errors.password && \r\n                        <div className={style.error}>{formik.errors.password}</div>}\r\n\r\n                        {/* Checkbox start */}\r\n                        <div className={style.checkBoxContainer}>\r\n                            <input  className={style.checkBox}\r\n                                    type=\"checkbox\" \r\n                                    //placeholder='E-mail*' \r\n                                    name='Remember Me'\r\n                                    id=\"rememberMe\" \r\n                                    />\r\n                            <label className={style.checkBoxLabel} htmlFor=\"rememberMe\">Remember me</label>\r\n\r\n                            \r\n                        </div>\r\n                        {/* Checkbox end */}\r\n                        \r\n                        <input  className={style.submitButton}\r\n                                    type=\"submit\" value=\"Login\" />\r\n\r\n                    </form>\r\n                </div>\r\n                \r\n       </> \r\n    //    <Grid container justify=\"center\"> \r\n    \r\n    //        <Grid item xs={4}> \r\n    //            <FormControl> \r\n    //                <FormLabel> \r\n    //                    <p>To log in get registered  \r\n    //                      <a style={{'textDecoration': 'none'}} href={'https://social-network.samuraijs.com/'} \r\n    //                         target={'_blank'}> here \r\n    //                      </a> \r\n    //                    </p> \r\n    //                    <p>or use common test account credentials:</p> \r\n    //                    <p>Email: free@samuraijs.com</p> \r\n    //                    <p>Password: free</p> \r\n    //                </FormLabel> \r\n                   \r\n    //                <form onSubmit={formik.handleSubmit}>\r\n    //                         <FormGroup> \r\n    //                             <TextField \r\n    //                                 label=\"Email\" \r\n    //                                 margin=\"normal\" \r\n    //                                 // name=\"email\"\r\n    //                                 // onChange={formik.handleChange}\r\n    //                                 // value={formik.values.email}\r\n    //                                 // onBlur={formik.handleBlur}\r\n    //                                 {...formik.getFieldProps('email')}\r\n    //                             />\r\n    //                              {/* Show error if field has touched and has error */}\r\n    //                             {formik.touched.email && formik.errors.email && \r\n    //                             <div style={{'color': 'red'}}>{formik.errors.email}</div>}\r\n    \r\n    //                             <TextField \r\n    //                                 type=\"password\" \r\n    //                                 label=\"Password\" \r\n    //                                 margin=\"normal\"\r\n    //                                 // name=\"password\"\r\n    //                                 // onChange={formik.handleChange}\r\n    //                                 // value={formik.values.password} \r\n    //                                 // onBlur={formik.handleBlur}\r\n    //                                 {...formik.getFieldProps('password')}\r\n    //                             /> \r\n    //                             {/* Show error if field has touched and has error */}\r\n    //                             {formik.touched.password && formik.errors.password && \r\n    //                             <div style={{'color': 'red'}}>{formik.errors.password}</div>}\r\n    \r\n    //                             <FormControlLabel \r\n    //                                 label={'Remember me'} \r\n    //                                 control={<Checkbox  {...formik.getFieldProps('rememberMe')}/>} \r\n    //                             /> \r\n    \r\n    //                             <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button> \r\n    //                         </FormGroup> \r\n    //                </form>\r\n    \r\n    //            </FormControl> \r\n    //        </Grid> \r\n    \r\n    //    </Grid> \r\n}","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        // type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange,\r\n        className,\r\n        onKeyPress,\r\n        onChangeText,\r\n        onEnter,\r\n        error,\r\n        spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${s.input} ${error ? s.errorInput : ''} ${className}` // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                // type={'text'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\nimport s from './SuperButton.module.css'\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        red,\n        className,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n    const finalClassName = `${s.button} ${red ? s.red : ''}`\n\n    return (\n        <button\n            className={finalClassName}\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        />\n    )\n}\n\nexport default SuperButton\n","import SuperInputText from \"../../../n1-main/m1-ui/u3-common/Super-Components/c1-SuperInputText/SuperInputText\"\r\nimport SuperButton from \"../../../n1-main/m1-ui/u3-common/Super-Components/c2-SuperButton/SuperButton\"\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {passwordRecovery} from \"./recoveryPassword-reducer\";\r\n\r\ntype ErrorsDataType = {\r\n    email?: string\r\n}\r\n\r\nexport const RecoveryPassword = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const from = \"test-front-admin <ai73a@yandex.by>\"\r\n    const message =\r\n        `<div>\r\n            <a href='http://localhost:3000/#/new-password/$token$'>link</a> \r\n        </div>`\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n\r\n        validate: (values => {\r\n            let errors: ErrorsDataType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = \"Required\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n\r\n            return errors;\r\n        }),\r\n\r\n        onSubmit: values => {\r\n            dispatch(passwordRecovery(values.email, from, message))\r\n        },\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <label htmlFor=\"email\">Email Address</label>\r\n                <SuperInputText type=\"email\"\r\n                                {...formik.getFieldProps(\"email\")}/>\r\n                {formik.errors.email\r\n                    ? (<div style={{color: \"red\"}}>{formik.errors.email}</div>)\r\n                    : null}\r\n            </div>\r\n            <SuperButton type=\"submit\">Submit</SuperButton>\r\n        </form>\r\n    )\r\n}","import SuperInputText from \"../../../n1-main/m1-ui/u3-common/Super-Components/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../../n1-main/m1-ui/u3-common/Super-Components/c2-SuperButton/SuperButton\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {newPassword} from \"./newPassword-reducer\";\r\nimport {Redirect, useParams } from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../n1-main/m2-bll/store/redux-store\";\r\n\r\ntype ErrorsDataType = {\r\n    newPassword?: string\r\n    repeatPassword?: string\r\n}\r\n\r\nexport const NewPassword = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {token} = useParams<{token: string}>()\r\n    const isPasswordChanged = useSelector<AppRootStateType, boolean>(state => state.newPassword.isPasswordChanged)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newPassword: '',\r\n            repeatPassword: ''\r\n        },\r\n\r\n        validate: (values => {\r\n            let errors: ErrorsDataType = {};\r\n\r\n            if (!values.newPassword) {\r\n                errors.newPassword = \"Required\"\r\n            } else if (values.newPassword.length < 8) {\r\n                errors.newPassword = \"Password must be more than 7 characters.\"\r\n            }\r\n\r\n            if (!values.repeatPassword) {\r\n                errors.repeatPassword = \"Required\"\r\n            } else if (values.repeatPassword !== values.newPassword) {\r\n                errors.repeatPassword = \"Password mismatch\"\r\n            }\r\n\r\n            return errors;\r\n        }),\r\n\r\n        onSubmit: values => {\r\n            dispatch(newPassword(values.newPassword, token))\r\n        },\r\n    });\r\n\r\n    if(isPasswordChanged) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <label htmlFor=\"password\">New Password</label>\r\n                <SuperInputText type=\"password\"\r\n                                {...formik.getFieldProps(\"newPassword\")}/>\r\n                {formik.touched.newPassword && formik.errors.newPassword\r\n                    ? (<div style={{color: \"red\"}}>{formik.errors.newPassword}</div>)\r\n                    : null}\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"password\">Repeat Password</label>\r\n                <SuperInputText type=\"password\"\r\n                                {...formik.getFieldProps(\"repeatPassword\")}/>\r\n                {formik.touched.repeatPassword && formik.errors.repeatPassword\r\n                    ? (<div style={{color: \"red\"}}>{formik.errors.repeatPassword}</div>)\r\n                    : null}\r\n            </div>\r\n            <SuperButton type=\"submit\">Submit</SuperButton>\r\n        </form>\r\n    )\r\n}\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\nimport s from './SuperCheckbox.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n    onChangeChecked?: (checked: boolean) => void\n    spanClassName?: string\n}\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange,\n        onChangeChecked,\n        className,\n        spanClassName,\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange && onChange(e);\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)// сделайте так чтоб работал onChange и onChangeChecked\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\n\n    return (\n        <label className={s.label}>\n            <input\n                type={'checkbox'}\n                onChange={onChangeCallback}\n                className={finalInputClassName}\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n            />\n            {children && <span className={s.spanClassName}>{children}</span>}\n        </label> // благодаря label нажатие на спан передастся в инпут\n    )\n}\n\nexport default SuperCheckbox\n","import React, {DetailedHTMLProps, InputHTMLAttributes, HTMLAttributes, useState} from 'react'\nimport SuperInputText from '../c1-SuperInputText/SuperInputText'\nimport s from './SuperSpan.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n// тип пропсов обычного спана\ntype DefaultSpanPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperEditableSpanType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n\n    spanProps?: DefaultSpanPropsType // пропсы для спана\n}\n\nconst SuperEditableSpan: React.FC<SuperEditableSpanType> = (\n    {\n        autoFocus, // игнорировать изменение этого пропса\n        onBlur,\n        onEnter,\n        spanProps,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const {children, onDoubleClick, className, ...restSpanProps} = spanProps || {}\n\n    const onEnterCallback = () => {\n        setEditMode(false)\n        // выключить editMode при нажатии Enter\n        onEnter && onEnter()\n    }\n    const onBlurCallback = (e: React.FocusEvent<HTMLInputElement>) => {\n        setEditMode(false) // выключить editMode при нажатии за пределами инпута\n        onBlur && onBlur(e)\n    }\n    const onDoubleClickCallBack = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n        setEditMode(true) // включить editMode при двойном клике\n        onDoubleClick && onDoubleClick(e)\n    }\n\n    const spanClassName = `${s.superSpan} ${className}`\n\n    return (\n        <>\n            {editMode\n                ? (\n                    <SuperInputText\n                        autoFocus // пропсу с булевым значением не обязательно указывать true\n                        onBlur={onBlurCallback}\n                        onEnter={onEnterCallback}\n\n                        {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n                    />\n                ) : (\n                    <span\n                        onDoubleClick={onDoubleClickCallBack}\n                        className={spanClassName}\n\n                        {...restSpanProps}\n                    >\n                        {/*если нет захардкодженного текста для спана, то значение инпута*/}\n                        {children || restProps.value}\n                    </span>\n                )\n            }\n        </>\n    )\n}\n\nexport default SuperEditableSpan\n","import React, {SelectHTMLAttributes, DetailedHTMLProps, ChangeEvent} from 'react'\nimport s from './SuperSelect.module.css'\n\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\n\ntype SuperSelectPropsType = DefaultSelectPropsType & {\n    options?: string[]\n    onChangeOption?: (option: string) => void\n}\n\nconst SuperSelect: React.FC<SuperSelectPropsType> = (\n    {\n        options,\n        onChange,\n        onChangeOption,\n        ...restProps\n    }\n) => {\n    const mappedOptions: JSX.Element[] = options // map options with key\n        ? options.map((el, i) => {\n            return <option key={`${el}-${i}`} value={el}>{el}</option>\n        })\n        : [];\n\n    const onChangeCallback = (e: ChangeEvent<HTMLSelectElement>) => {\n        onChange && onChange(e);\n        onChangeOption && onChangeOption(e.currentTarget.value)\n    }\n\n    return (\n        <div className={s.select}>\n            <select onChange={onChangeCallback} {...restProps}>\n                {mappedOptions}\n            </select>\n        </div>\n    )\n}\n\nexport default SuperSelect\n","import React, {ChangeEvent, InputHTMLAttributes, DetailedHTMLProps} from 'react'\nimport s from './../c3-SuperCheckbox/SuperCheckbox.module.css'\n\ntype DefaultRadioPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperRadioPropsType = DefaultRadioPropsType & {\n    options?: string[]\n    onChangeOption?: (option: string) => void\n}\n\nconst SuperRadio: React.FC<SuperRadioPropsType> = (\n    {\n        type, name,\n        options, value,\n        onChange, onChangeOption,\n        ...restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange && onChange(e);\n        onChangeOption && onChangeOption(e.currentTarget.value)\n    }\n\n\n    const mappedOptions: JSX.Element[] = options ? options.map((el, i) => ( // map options with key\n        <label key={`${name}-${i}`}>\n            <input\n                type={'radio'}\n                name={name}\n                checked={el === value}\n                value={el}\n                onChange={onChangeCallback}\n                className={s.checkbox}\n                {...restProps}\n            />\n            {el}\n        </label>\n    )) : []\n\n    return (\n        <>\n            {mappedOptions}\n        </>\n    )\n}\n\nexport default SuperRadio\n","import {useState} from \"react\";\r\nimport SuperInputText from \"../../n1-main/m1-ui/u3-common/Super-Components/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../n1-main/m1-ui/u3-common/Super-Components/c2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"../../n1-main/m1-ui/u3-common/Super-Components/c3-SuperCheckbox/SuperCheckbox\";\r\nimport SuperEditableSpan from \"../../n1-main/m1-ui/u3-common/Super-Components/c4-SuperEditableSpan/SuperEditableSpan\";\r\nimport SuperSelect from \"../../n1-main/m1-ui/u3-common/Super-Components/c5-SuperSelect/SuperSelect\";\r\nimport SuperRadio from \"../../n1-main/m1-ui/u3-common/Super-Components/c6-SuperRadio/SuperRadio\";\r\n\r\nconst arr = ['Tim', 'Nikolay', 'Nikita']\r\n\r\n\r\nexport const Test = () => {\r\n    const [value, setValue] = useState<string>('')\r\n    const [selections, onChangeOption] = useState(arr[1])\r\n\r\n    return (\r\n        <>\r\n            <SuperInputText/>\r\n            <SuperCheckbox/>\r\n            <SuperButton>\r\n                Click here\r\n            </SuperButton>\r\n            <SuperEditableSpan\r\n                value={value}\r\n                onChangeText={setValue}\r\n                spanProps={{children: value ? undefined : 'enter text...'}}\r\n            />\r\n            <SuperSelect\r\n                options={arr}\r\n                value={selections}\r\n                onChangeOption={onChangeOption}\r\n            />\r\n            <SuperRadio\r\n                name={'radio'}\r\n                options={arr}\r\n                value={selections}\r\n                onChangeOption={onChangeOption}\r\n            />\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Error404.module.css'\r\n\r\nexport const Error404 = () => {\r\n    return <div>\r\n        <div className={s.c}>\r\n            <div className={s._404}>404</div>\r\n            <div className={s._1}>THE PAGE</div>\r\n            <div className={s._2}>WAS NOT FOUND</div>\r\n            <NavLink className={s.btn} to='/profile'>BACK TO PROFILE</NavLink>\r\n        </div>\r\n    </div>\r\n}","export const Profile = () => {\r\n    return (\r\n        <>\r\n            Profile Page\r\n        </>\r\n    )\r\n}","import {useFormik} from \"formik\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport SuperInputText from \"../../../n1-main/m1-ui/u3-common/Super-Components/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../../n1-main/m1-ui/u3-common/Super-Components/c2-SuperButton/SuperButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {registerUser} from \"./register-reducer\";\r\nimport {AppRootStateType} from \"../../../n1-main/m2-bll/store/redux-store\";\r\nimport {useState} from \"react\";\r\nimport s from './Register.module.css';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    confirmPassword?: string\r\n}\r\n\r\nexport const Register = () => {\r\n\r\n    const isRegister = useSelector<AppRootStateType, boolean>(state => state.register.isRegister)\r\n    const dispatch = useDispatch();\r\n\r\n    const [type, setType] = useState<string>('password')\r\n\r\n    const showHide = () => {\r\n        setType(type === 'text' ? 'password' : 'text')\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            } else if (!/(?=.*[0-9])/gi.test(values.password)) {\r\n                errors.password = 'The password must contain at least one number'\r\n            } else if (!/(?=.*[a-z])(?=.*[A-Z])/gi.test(values.password)) {\r\n                errors.password = 'The password  must contain at least one lowercase or uppercase Latin letter'\r\n            } else if (!/[0-9a-zA-Z!@#$%^&*]{8,}/gi.test(values.password)) {\r\n                errors.password = 'The password must have a minimum 8 characters'\r\n            }\r\n\r\n            if (!values.confirmPassword) {\r\n                errors.confirmPassword = 'Confirm password is required';\r\n            } else if (values.password !== values.confirmPassword) {\r\n                errors.confirmPassword = 'The password and confirm password fields do not match.';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(registerUser(values.email, values.password))\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    if (isRegister) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.authRegister}>\r\n            <div className={s.wrapper}>\r\n                <span className={s.incubator}>It-incubator</span>\r\n                <span className={s.signUp}>Sign Up</span>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <div className={s.inputFormRegister}>\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <SuperInputText\r\n                            id=\"email\"\r\n                            type=\"email\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email && formik.touched.email &&\r\n                        <div className={s.errorMessage}>{formik.errors.email}</div>}\r\n                    </div>\r\n\r\n                    <div className={s.inputFormRegister}>\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <SuperInputText\r\n                            id=\"password\"\r\n                            type={type}\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        <span className={s.showHideMenu}\r\n                              onClick={showHide}>{type === 'text' ? '🔒' : '🔑'}</span>\r\n                        {formik.errors.password && formik.touched.password &&\r\n                        <div className={s.errorMessage}>{formik.errors.password}</div>}\r\n                    </div>\r\n\r\n                    <div className={s.inputFormRegister}>\r\n                        <label htmlFor=\"confirmPassword\">Confirm password</label>\r\n                        <SuperInputText\r\n                            id=\"confirmPassword\"\r\n                            type=\"password\"\r\n                            {...formik.getFieldProps('confirmPassword')}\r\n                        />\r\n                        {formik.errors.confirmPassword && formik.touched.confirmPassword &&\r\n                        <div className={s.errorMessage}>{formik.errors.confirmPassword}</div>}\r\n                    </div>\r\n\r\n                    <div className={s.buttonFormRegister}>\r\n                        <SuperButton\r\n                            className={s.button}\r\n                            type='reset'>Cancel\r\n                        </SuperButton>\r\n                        <SuperButton\r\n                            className={s.button}\r\n                            type=\"submit\">Register\r\n                        </SuperButton>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"../../../n2-features/f1-auth/a1-login/Login\";\r\nimport {RecoveryPassword} from \"../../../n2-features/f1-auth/a3-recoveryPassword/RecoveryPassword\";\r\nimport {NewPassword} from \"../../../n2-features/f1-auth/a4-new-password/NewPassword\";\r\nimport {Test} from \"../../../n2-features/f0-test/Test\";\r\nimport {Error404} from \"../../../n2-features/f3-error/Error404\";\r\nimport { Profile } from \"../u2-components/Profile/Profile\";\r\nimport { Register } from \"../../../n2-features/f1-auth/a2-register/Register\";\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route path={'/login'} render={() => <Login/>}/>\r\n                <Route path={'/register'} render={() => <Register/>}/>\r\n                <Route path={'/profile'} render={() => <Profile/>}/>\r\n                <Route path={'/recovery'} render={() => <RecoveryPassword/>}/>\r\n                <Route path={'/new-password/:token'} render={() => <NewPassword/>}/>\r\n                <Route path={'/test'} render={() => <Test/>}/>\r\n                <Route render={() => <Error404/>}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport h from './Header.module.css'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div>\r\n            Hello, I'm a Header Component\r\n            <div className={h.wrapper}>\r\n                <NavLink className={h.link} activeClassName={h.active} to={'/login'}>Login page</NavLink>\r\n                <NavLink className={h.link} activeClassName={h.active} to={'/register'}>Register page</NavLink>\r\n                <NavLink className={h.link} activeClassName={h.active} to={'/profile'}>Profile page</NavLink>\r\n                <NavLink className={h.link} activeClassName={h.active} to={'/recovery'}>Recovery page</NavLink>\r\n                <NavLink className={h.link} activeClassName={h.active} to={'/new-password'}>New Password page</NavLink>\r\n                <NavLink className={h.link} activeClassName={h.active} to={'/test'}>Test page</NavLink>\r\n                <NavLink className={h.link} activeClassName={h.active} to={'/404'}>Error page</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {Routes} from \"../../u4-routes/Routes\";\r\nimport {Header} from \"../Header/Header\";\r\n\r\nexport const Main = () => {\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Routes/>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport {Provider} from 'react-redux';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {store} from '../../m2-bll/store/redux-store';\r\nimport {Main} from '../u2-components/Main/Main';\r\nimport './App.css';\r\n\r\n// Tim's update\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <HashRouter>\r\n                <Provider store={store}>\r\n                    <Main/>\r\n                </Provider>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './n1-main/m1-ui/u1-app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}